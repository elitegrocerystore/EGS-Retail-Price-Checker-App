<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EGS Retail Price Checker</title>
    <!-- React and ReactDOM CDNs -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <!-- Babel for transforming JSX in the browser (for this single-file solution) -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        /* src/App.css */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

        body {
            margin: 0;
            font-family: 'Inter', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-webkit-smoothing: grayscale;
            
            /* Set default text color to light for readability on dark background */
            color: #f9fafb; 

            /* ---------------------------------------------------- */
            /* REVERTED: DARK PLASMA EFFECT (Green, Orange, Dark-Grey) */
            
            /* Define the custom gradient with dark, desaturated colors */
            background: linear-gradient(
                135deg, 
                #1d2333, /* Deep Blue-Grey (Base) */
                #2a3a2b, /* Dark, desaturated Green */
                #3d2c22, /* Dark, desaturated Orange/Brown */
                #1d2333, /* Deep Blue-Grey (Base) */
                #2f2f2f  /* Medium Dark Grey for subtle 'white' blend */
            );
            
            /* Make the gradient huge for soft, ambient shifts */
            background-size: 400% 400%; 
            background-attachment: fixed; 
            
            /* Apply a subtle, slow animation */
            animation: colorShift 35s ease-in-out infinite; 
            /* ---------------------------------------------------- */
        }

        /* ---------------------------------------------------- */
        /* KEYFRAME FOR PLASMA SHIFT */
        @keyframes colorShift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        /* ---------------------------------------------------- */

        .app-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            position: relative;
            z-index: 10;
        }

        .app-header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .app-header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
            color: #f9fafb; 
        }

        /* ---------------------------------------------------- */
        /* SOCIAL BUTTON STYLES (Constant, Elegant RGB Glow) */

        .social-links {
            display: flex;
            flex-wrap: wrap;
            gap: 1.5rem;
            justify-content: center;
            margin-top: 1.5rem;
            margin-bottom: 3rem;
        }

        /* GLOW WRAPPER */
        .social-glow-container {
            position: relative;
            padding: 2px;
            border-radius: 15px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow: hidden; 
        }

        /* ::after element defines the constant RGB glow */
        .social-glow-container::after {
            content: '';
            position: absolute;
            top: -4px;
            left: -4px;
            right: -4px;
            bottom: -4px;
            
            /* Full RGB Gradient */
            background: linear-gradient(
                45deg,
                #ff0066, #ff6600, #e6e600, #00cc99, #0066ff, #cc00ff
            );
            background-size: 300% 300%;
            border-radius: 19px;
            z-index: -1;
            opacity: 1; 
            filter: blur(8px);
            animation: gradientShift 8s linear infinite; 
        }

        /* Base style for the actual button element */
        .social-button {
            position: relative;
            z-index: 1;
            display: flex;
            align-items: center;
            gap: 0.6rem;
            padding: 12px 24px;
            border-radius: 12px;
            text-decoration: none;
            font-weight: 600;
            font-size: 1rem;
            letter-spacing: 0.05em;
            text-transform: uppercase;
            color: white; 
            text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);
            border: none;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s cubic-bezier(0.25, 0.8, 0.25, 1), box-shadow 0.2s;
            background-color: #333; /* Fallback for button background */
        }

        .social-button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }

        .social-button:active {
            transform: scale(0.98);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        /* Specific Gradients (Internal Button Color) */
        .social-button.instagram {
            background: radial-gradient(circle at 30% 107%, #fdf497 0%, #fdf497 5%, #fd5949 45%, #d6249f 60%, #285AEB 90%);
        }

        .social-button.website {
            background: linear-gradient(90deg, #10b981 0%, #059669 100%);
        }

        .social-button.daraz {
            background: linear-gradient(90deg, #ff5b00 0%, #ff7b2b 100%);
        }

        .social-icon {
            width: 20px;
            height: 20px;
            stroke: currentColor;
            fill: none;
        }

        /* KEYFRAMES */
        @keyframes gradientShift {
            0% { background-position: 0% 50%; }
            100% { background-position: 100% 50%; }
        }

        /* SEARCH BAR STYLES */
        .search-glow-wrapper {
            position: relative;
            width: 100%;
            max-width: 500px;
            margin: 0 auto;
            border-radius: 28px;
            padding: 1px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 1px 2px rgba(0, 0, 0, 0.06);
            transition: box-shadow 0.3s ease;
        }

        .search-glow-wrapper::after {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            
            background: linear-gradient(
                45deg,
                #ff0066, #ff6600, #e6e600, #00cc99, #0066ff, #cc00ff
            );
            background-size: 300% 300%;
            border-radius: 30px;
            z-index: -1;
            opacity: 0;
            filter: blur(8px);
            transition: opacity 0.5s ease, background-position 1s ease;
            animation: gradientShift 5s ease infinite alternate;
        }

        .search-glow-wrapper:focus-within {
            box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.05); 
        }

        .search-glow-wrapper:focus-within::after {
            opacity: 1;
            background-position: 100% 50%;
        }

        .search-input {
            width: 100%;
            padding: 12px 20px;
            border-radius: 24px;
            border: 1px solid #d2d2d7;
            font-size: 1rem;
            background-color: #fff; 
            transition: border-color 0.3s ease;
            display: block;
            color: #1d1d1f; 
        }

        .search-input:focus {
            outline: none;
            border-color: transparent;
        }

        /* PRODUCT LIST STYLES */
        .product-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
            margin-top: 3rem;
            max-width: 700px;
            margin-left: auto;
            margin-right: auto;
        }

        .list-item {
            background-color: #ffffff; 
            border-radius: 12px;
            padding: 16px 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            display: flex;
            align-items: center;
            justify-content: space-between;
            transition: transform 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
            cursor: default;
        }

        .list-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .item-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .item-name {
            font-size: 1.05rem;
            font-weight: 600;
            color: #1d1d1f; 
        }

        .item-price {
            font-size: 1.05rem;
            font-weight: 700;
            color: #ff5b00;
            flex-shrink: 0;
        }

        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            flex-shrink: 0;
            box-shadow: 0 0 5px rgba(0,0,0,0.2);
        }
        .text-center { text-align: center; }
        .text-gray-400 { color: #9ca3af; }
        .text-red-400 { color: #f87171; }
    </style>
</head>
<body>
    <div id="root"></div>

    <!-- The React application logic -->
    <script type="text/babel">
        const { useState, useEffect } = React;

        // SVG Icons for the buttons (using inline SVG is better than lucide-react in static HTML)
        const InstagramIcon = () => (
            <svg className="social-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="20" height="20" x="2" y="2" rx="5" ry="5"/><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"/><line x1="17.5" x2="17.51" y1="6.5" y2="6.5"/></svg>
        );

        const DarazIcon = () => (
            <svg className="social-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8"/><path d="m3 7 8 5 8-5"/><path d="M12 22V12"/></svg>
        );

        const WebsiteIcon = () => (
            <svg className="social-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="M12 2a15.3 15.3 0 0 0 4 10 15.3 15.3 0 0 0-4 10 15.3 15.3 0 0 0-4-10 15.3 15.3 0 0 0 4-10z"/><path d="M2 12h20"/></svg>
        );

        // Helper component for cycling colors 
        const getStatusColor = (id) => {
            const colors = ['#10b981', '#ff6600', '#0066ff', '#cc00ff']; // Green, Orange, Blue, Purple
            return colors[id % colors.length];
        };

        // Product List Item Component
        const ProductListItem = ({ id, name, retail_price }) => {
            const statusColor = getStatusColor(id);
            
            return (
                <div className="list-item">
                    <div className="item-info">
                        <div className="status-dot" style={{ backgroundColor: statusColor }} title="Status Indicator"></div>
                        <span className="item-name">{name}</span>
                    </div>
                    <span className="item-price">Rs. {retail_price}</span>
                </div>
            );
        };

        // Main App Component
        const App = () => {
            const [products, setProducts] = useState([]);
            const [searchTerm, setSearchTerm] = useState('');
            const [isLoading, setIsLoading] = useState(false);
            const [error, setError] = useState(null);

            // Fetch data from the backend when the component loads
            useEffect(() => {
                setIsLoading(true);
                // NOTE: This API call uses a local server address (http://127.0.0.1:5000), 
                // which MUST be running for the data to load.
                fetch('http://127.0.0.1:5000/api/products')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    setProducts(data);
                    setIsLoading(false);
                })
                .catch(err => {
                    console.error("Error fetching data:", err);
                    setError("Could not fetch products. Please ensure the local server (http://127.0.0.1:5000) is running.");
                    setIsLoading(false);
                });
            }, []);

            // Filter products based on search term
            const filteredProducts = products.filter(product =>
                product.name.toLowerCase().includes(searchTerm.toLowerCase())
            );

            return (
                <div className="app-container">
                    <header className="app-header">
                        <h1>EGS Retail Price Checker</h1>
                        
                        {/* Social Media and Website Buttons */}
                        <div className="social-links">
                            
                            {/* Instagram Button with Constant RGB Glow Wrapper */}
                            <div className="social-glow-container">
                                <a href="https://www.instagram.com/elitegrocery" target="_blank" rel="noopener noreferrer" className="social-button instagram">
                                    <InstagramIcon />
                                    Instagram
                                </a>
                            </div>

                            {/* Daraz Button with Constant RGB Glow Wrapper */}
                            <div className="social-glow-container">
                                <a href="https://www.daraz.pk/shop/elite-stock" target="_blank" rel="noopener noreferrer" className="social-button daraz">
                                    <DarazIcon />
                                    Daraz
                                </a>
                            </div>

                            {/* Website Button (Green) with Constant RGB Glow Wrapper */}
                            <div className="social-glow-container">
                                <a href="https://www.elitegrocerystore.com" target="_blank" rel="noopener noreferrer" className="social-button website">
                                    <WebsiteIcon />
                                    Website
                                </a>
                            </div>
                        </div>

                        {/* RGB Search Bar Structure */}
                        <div className="search-glow-wrapper">
                            <input
                                type="search"
                                placeholder="Search for a product..."
                                className="search-input"
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                            />
                        </div>
                    </header>
                    
                    <main className="product-list">
                        {isLoading ? (
                            <p className="text-center text-gray-400">Loading products...</p>
                        ) : error ? (
                            <p className="text-center text-red-400">{error}</p>
                        ) : (
                            filteredProducts.map(product => (
                                <ProductListItem 
                                    key={product.id} 
                                    id={product.id}
                                    name={product.name}
                                    retail_price={product.retail_price}
                                />
                            ))
                        )}
                        
                        {filteredProducts.length === 0 && !isLoading && !error && (
                            <p className="text-center text-gray-400">
                                {products.length > 0 ? `No products found matching "${searchTerm}".` : 'No products loaded yet.'}
                            </p>
                        )}
                    </main>
                </div>
            );
        };

        // Render the application
        ReactDOM.render(<App />, document.getElementById('root'));

    </script>
</body>
</html>
